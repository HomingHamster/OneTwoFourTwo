package oneTwoFourTwo;

import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class CodeGenerator {
	
	// This regular expression will spilt the attribute line into the
	// three necessarry parts when it is used.
	static Pattern attributePattern = 
		Pattern.compile("^([-+])\\s?([a-zA-Z]+):\\s?([a-zA-Z]+)$");
	
	// This regular expression will spilt the method line into the
	// necessarry parts when it is used.
	//TODO: allow this to interpret methods where more than one argument
	// needs to be passed into the method
	static Pattern methodPattern = 
		Pattern.compile("^([+-])\\s?([a-zA-Z]+)(?:\\(\\)|\\(([a-zA-Z]+)\\s([a-zA-Z]+)\\)):\\s?([a-zA-Z]+)");
	
	/*
	 * This is what the menu should call when the generate code button
	 * is pressed, it will take a list of classes and generate the code 
	 * for them. It will then do somthing with the code, save to text file
	 * or parhaps make a few windows containing the code?
	 */
	public static Vector<String> generateCodeForVectorOfClasses(Vector<DragAndDropClassObject> classObjects){
		//This is a list of strings to contain the source code
		//for every class.
		Vector<String> output = new Vector<String>();
		
		//Loop through the list of classes and pass each one individually to
		//the generate class code method.
		for (DragAndDropClassObject classObject: classObjects){
			output.add(generateClassCode(classObject));
		}
		return output;
	}
	
	/*
	 * This method will generate the code for a single class
	 * and return a string. It must be called for every class in 
	 * the project.
	 * 
	 * It should get passed a ClassObject, but i put the links in
	 * the DragAndDropClassObject stupidly and now i cba to move them
	 * around. So it needs a DragAndDropClassObject.
	 */
	public static String generateClassCode(DragAndDropClassObject classObject){
		Matcher matcher;
		String output = "";		//sets output to nothing.
		String tab = "    ";		//sets what tab is.
		
		// Add the fairly static beginning of the file:
		output += "//" + classObject.name + ".java\n";
		output += "// Generated by OneTwoFourProject!\n\n";
		output += "import java.util.*;\n";
		output += "\n";
		output += "public class " + classObject.name + "{\n";
		output += "\n";

		String attribute;
		
		//For every attribute the class has do the following:
		for (int i = 0; i < classObject.classObject.attributes.size(); i++){
			attribute = classObject.classObject.attributes.get(i);
			// 1 - Indent the line
			output += tab;
			// 2 - Apply the regex
			matcher = attributePattern.matcher(attribute);
			// 3 - Check it worked
			System.out.println(String.valueOf(matcher.groupCount()));
			if (matcher.matches() && matcher.groupCount()== 3){
				
				// 4 - Print public or private:
				if (matcher.group(1).equals("-")){
					output += "private ";
				} else if (matcher.group(1).equals("+")){
					output += "public ";
				}
				
				// 5 - print the rest of the line in correct
				// order with newline.
				output += matcher.group(3) + " " + matcher.group(2) 
							+ ";\n\n";
			} else { // If there is no match
				// Stick an error in the output. (as comment);
				output += "//error reading " + attribute + "\n";
			}
		}
		
		output += "\n\n";
		
		//TODO: interpret the methods..
		String method;
		for (int i = 0; i < classObject.classObject.methods.size(); i++){
			method = classObject.classObject.methods.get(i);
			output += tab;
			matcher = methodPattern.matcher(method);
			
			//if there are 5 things matched, it means the user did
			//provide an argument for their method, so we take 
			//according action...
			if (matcher.matches() && matcher.groupCount() == 5){
				//Figure out if it is public or private
				if (matcher.group(1).equals("-")){
					output += "private ";
				} else if (matcher.group(1).equals("+")){
					output += "public ";
				}
				//output type
				output += matcher.group(5) + " ";
				//output name
				output += matcher.group(2) + " (";
				//output argument type
				output += matcher.group(3) + " ";
				//output argument name plus finish off method
				output += matcher.group(4) + ") {\n\n" + tab + "}\n\n";
			} 
			//if there are only 3 things matched, then the user
			//did not provide an argument for the method, so we
			//take according action.
			else if (matcher.matches() && matcher.groupCount() == 3){
				//Figure out if it is public or private
				if (matcher.group(1).equals("-")){
					output += "private ";
				} else if (matcher.group(1).equals("+")){
					output += "public ";
				}
				//output type
				output += matcher.group(3) + " ";
				//output name and finsh the method off
				output += matcher.group(2) + "() {\n\n" + tab + "}\n\n";
			}
		}
		
		output += "}";
		return output;
	}
}