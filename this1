diff --git a/bin/oneTwoFourTwo/DiagramPanel.class b/bin/oneTwoFourTwo/DiagramPanel.class
index 6f94bb5..dc5ca37 100755
Binary files a/bin/oneTwoFourTwo/DiagramPanel.class and b/bin/oneTwoFourTwo/DiagramPanel.class differ
diff --git a/bin/oneTwoFourTwo/DragAndDropClassObject.class b/bin/oneTwoFourTwo/DragAndDropClassObject.class
index be08719..89c43b8 100755
Binary files a/bin/oneTwoFourTwo/DragAndDropClassObject.class and b/bin/oneTwoFourTwo/DragAndDropClassObject.class differ
diff --git a/bin/oneTwoFourTwo/DragAndDropController.class b/bin/oneTwoFourTwo/DragAndDropController.class
index b8cf162..1b60900 100755
Binary files a/bin/oneTwoFourTwo/DragAndDropController.class and b/bin/oneTwoFourTwo/DragAndDropController.class differ
diff --git a/bin/oneTwoFourTwo/Link.class b/bin/oneTwoFourTwo/Link.class
new file mode 100755
index 0000000..3d62d5b
Binary files /dev/null and b/bin/oneTwoFourTwo/Link.class differ
diff --git a/src/oneTwoFourTwo/DiagramPanel.java b/src/oneTwoFourTwo/DiagramPanel.java
index 165496c..dc6e4f9 100755
--- a/src/oneTwoFourTwo/DiagramPanel.java
+++ b/src/oneTwoFourTwo/DiagramPanel.java
@@ -45,6 +45,7 @@ public class DiagramPanel extends JPanel{
 	public void paintComponent(Graphics g) {
 		super.paintComponent(g);
 		this.controller.drawAll(g);
+		this.controller.drawLinks(g);
 	}
 	
 	/*
diff --git a/src/oneTwoFourTwo/DragAndDropClassObject.java b/src/oneTwoFourTwo/DragAndDropClassObject.java
index 34f75f0..288fb6f 100755
--- a/src/oneTwoFourTwo/DragAndDropClassObject.java
+++ b/src/oneTwoFourTwo/DragAndDropClassObject.java
@@ -14,6 +14,7 @@ import java.awt.Graphics;
 import java.awt.Graphics2D;
 import java.awt.Rectangle;
 import java.awt.RenderingHints;
+import java.util.Vector;
 
 import javax.swing.JPanel;
 
@@ -22,6 +23,7 @@ import javax.swing.JPanel;
 @SuppressWarnings("serial")
 
 public class DragAndDropClassObject extends JPanel {
+	Vector<Link> links = new Vector<Link>();
 	ClassObject classObject;
 	Rectangle rect;
 	String name;
diff --git a/src/oneTwoFourTwo/DragAndDropController.java b/src/oneTwoFourTwo/DragAndDropController.java
index ce19782..7a75569 100755
--- a/src/oneTwoFourTwo/DragAndDropController.java
+++ b/src/oneTwoFourTwo/DragAndDropController.java
@@ -68,6 +68,7 @@ public class DragAndDropController extends MouseInputAdapter{
 	        		renameClass(components.get(i).name);
 	        		return;
 	        	} else if (s=="add link"){
+	        		addLink(components.get(i).name);
 	        		return;
 	        	} else {
 	        		System.out.println("uh oh!");
@@ -154,6 +155,21 @@ public class DragAndDropController extends MouseInputAdapter{
 			}
 		}
 	}
+	
+	public void addLink(String classOneName){
+		for (int i=0;i<components.size();i++){
+			if (components.get(i).name == classOneName){
+				String classTwoName = 
+					JOptionPane.showInputDialog("Enter Class Two Name:");
+				String oneToManyQuantifier = 
+					JOptionPane.showInputDialog("Enter a quantifier:");
+				components.get(i).links.add(new Link(classTwoName, 
+						oneToManyQuantifier));
+				diagramPanel.repaint();
+				return;
+			}
+		}
+	}
  
 	/*
 	 * (non-Javadoc)
@@ -192,4 +208,30 @@ public class DragAndDropController extends MouseInputAdapter{
 			currentClass.paintComponent(g);
 		}
 	}
+	
+	/*
+	 * Some funky jazz to draw the links, 
+	 * TODO: draw the arrow head.
+	 * TODO: draw the quantifier.
+     * TODO: change from one line into two squared parts.
+	 */
+	public void drawLinks(Graphics g){
+		Vector<Link> currentLinks;
+		String obj;
+
+		for(int i=0; i < components.size(); i++) {
+			currentLinks = (Vector<Link>)(components.get(i).links);
+			for(int j=0; j < currentLinks.size(); j++) {
+				Link currentLink = currentLinks.get(j);
+
+				for(int m=0; m < components.size(); m++) {
+					obj = components.get(m).name;
+					if (obj.equals(currentLink.classTwoName)){
+						currentLink.paintComponent(g, components.get(i), components.get(m));
+						break;
+					}
+				}
+			}
+		}
+	}
 }
\ No newline at end of file
diff --git a/src/oneTwoFourTwo/Link.java b/src/oneTwoFourTwo/Link.java
new file mode 100755
index 0000000..bc7fbb1
--- /dev/null
+++ b/src/oneTwoFourTwo/Link.java
@@ -0,0 +1,112 @@
+/**
+ * Based on classes Written by
+ * @author Amy James (arj18)
+ * Modified by Felix Farquharson (fef)
+ * This class defines a simple link, it will be held by one class,
+ * so it only references the second class.
+ */
+package oneTwoFourTwo;
+
+import java.awt.Color;
+import java.awt.Graphics;
+import java.awt.Graphics2D;
+import java.awt.Point;
+import java.awt.RenderingHints;
+import java.util.Vector;
+
+public class Link {
+	String classTwoName;
+	String quantifier;
+	
+	public Link(String name, String quant){
+		this.classTwoName = name;
+		this.quantifier = quant;
+	}
+	
+	/*
+	 * This method contains all the logic necessarry to figure out
+	 * the best path for the line to take and draws the line on the fly.
+	 */
+	public void paintComponent(Graphics g, 
+			DragAndDropClassObject classOne, 
+			DragAndDropClassObject classTwo){
+		Vector<Point> pointsOne = new Vector<Point>();
+		Vector<Point> pointsTwo = new Vector<Point>();
+		Vector<DragAndDropClassObject> ddClasses = 
+			new Vector<DragAndDropClassObject>();
+		ddClasses.add(classOne);
+		ddClasses.add(classTwo);
+		
+		Vector<Point> currentPoints;
+		DragAndDropClassObject currentClass;
+		
+		//Loops through both of the classes on the diagram
+		//and finds all the points available from both as Points (x,y)
+		//on the diagram pannel, it sticks these variables into
+		//pointsOne and pointsTwo as necessarry.
+		for (int i=0; i<ddClasses.size();i++){
+			currentPoints = new Vector<Point>();
+		    currentClass = ddClasses.get(i);
+		
+			currentPoints.add(new Point(currentClass.rect.x, currentClass.rect.y));
+			currentPoints.add(new Point(currentClass.rect.x + 
+					(currentClass.rect.width/2), currentClass.rect.y));
+			currentPoints.add(new Point(currentClass.rect.x +
+					(currentClass.rect.width), currentClass.rect.y));
+			currentPoints.add(new Point(currentClass.rect.x + 
+					(currentClass.rect.width), currentClass.rect.y +
+					(currentClass.rect.height/2)));
+			currentPoints.add(new Point(currentClass.rect.x + 
+					(currentClass.rect.width), currentClass.rect.y +
+					(currentClass.rect.height)));
+			currentPoints.add(new Point(currentClass.rect.x + 
+					(currentClass.rect.width/2), currentClass.rect.y +
+					(currentClass.rect.height)));
+			currentPoints.add(new Point(currentClass.rect.x, currentClass.rect.y+
+					(currentClass.rect.height)));
+			currentPoints.add(new Point(currentClass.rect.x, currentClass.rect.y+
+					(currentClass.rect.height/2)));
+			
+			if(i==0){
+				pointsOne = currentPoints;
+			} else if (i==1){
+				pointsTwo = currentPoints;
+			}
+			
+		}
+		
+		/*
+		 * next we loop through all of the possible points combinations
+		 * and note the shortest one available and where both ends are.
+		 */
+		int x;
+		int y;
+		Point bestPointOne = new Point(0,0);
+		Point bestPointTwo = new Point(0,0);
+		int distance = 9999;
+		
+		for (Point pointOne:pointsOne){
+			for (Point pointTwo:pointsTwo){
+				x = Math.abs(pointOne.x-pointTwo.x);
+				y = Math.abs(pointOne.y-pointTwo.y);
+				if (x+y<distance){
+					distance=x+y;
+					bestPointOne = pointOne;
+					bestPointTwo = pointTwo;
+				}
+			}
+		}
+		
+		/*
+		 * finally we draw the graphics to the diagram pannel
+		 * TODO: make the lines squared and more like blueJ.
+		 */
+		Graphics2D g2 = (Graphics2D)g;
+		g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
+                RenderingHints.VALUE_ANTIALIAS_ON);
+		g2.setPaint(Color.BLACK);
+		g2.drawLine(bestPointOne.x, bestPointOne.y,
+				bestPointTwo.x, bestPointTwo.y);
+	}
+
+}
diff --git a/this b/this
new file mode 100644
index 0000000..e03b4b7
--- /dev/null
+++ b/this
@@ -0,0 +1,107 @@
+diff --git a/bin/oneTwoFourTwo/DiagramPanel.class b/bin/oneTwoFourTwo/DiagramPanel.class
+index 6f94bb5..dc5ca37 100755
+Binary files a/bin/oneTwoFourTwo/DiagramPanel.class and b/bin/oneTwoFourTwo/DiagramPanel.class differ
+diff --git a/bin/oneTwoFourTwo/DragAndDropClassObject.class b/bin/oneTwoFourTwo/DragAndDropClassObject.class
+index be08719..89c43b8 100755
+Binary files a/bin/oneTwoFourTwo/DragAndDropClassObject.class and b/bin/oneTwoFourTwo/DragAndDropClassObject.class differ
+diff --git a/bin/oneTwoFourTwo/DragAndDropController.class b/bin/oneTwoFourTwo/DragAndDropController.class
+index b8cf162..1b60900 100755
+Binary files a/bin/oneTwoFourTwo/DragAndDropController.class and b/bin/oneTwoFourTwo/DragAndDropController.class differ
+diff --git a/src/oneTwoFourTwo/DiagramPanel.java b/src/oneTwoFourTwo/DiagramPanel.java
+index 165496c..dc6e4f9 100755
+--- a/src/oneTwoFourTwo/DiagramPanel.java
++++ b/src/oneTwoFourTwo/DiagramPanel.java
+@@ -45,6 +45,7 @@ public class DiagramPanel extends JPanel{
+ 	public void paintComponent(Graphics g) {
+ 		super.paintComponent(g);
+ 		this.controller.drawAll(g);
++		this.controller.drawLinks(g);
+ 	}
+ 	
+ 	/*
+diff --git a/src/oneTwoFourTwo/DragAndDropClassObject.java b/src/oneTwoFourTwo/DragAndDropClassObject.java
+index 34f75f0..288fb6f 100755
+--- a/src/oneTwoFourTwo/DragAndDropClassObject.java
++++ b/src/oneTwoFourTwo/DragAndDropClassObject.java
+@@ -14,6 +14,7 @@ import java.awt.Graphics;
+ import java.awt.Graphics2D;
+ import java.awt.Rectangle;
+ import java.awt.RenderingHints;
++import java.util.Vector;
+ 
+ import javax.swing.JPanel;
+ 
+@@ -22,6 +23,7 @@ import javax.swing.JPanel;
+ @SuppressWarnings("serial")
+ 
+ public class DragAndDropClassObject extends JPanel {
++	Vector<Link> links = new Vector<Link>();
+ 	ClassObject classObject;
+ 	Rectangle rect;
+ 	String name;
+diff --git a/src/oneTwoFourTwo/DragAndDropController.java b/src/oneTwoFourTwo/DragAndDropController.java
+index ce19782..7a75569 100755
+--- a/src/oneTwoFourTwo/DragAndDropController.java
++++ b/src/oneTwoFourTwo/DragAndDropController.java
+@@ -68,6 +68,7 @@ public class DragAndDropController extends MouseInputAdapter{
+ 	        		renameClass(components.get(i).name);
+ 	        		return;
+ 	        	} else if (s=="add link"){
++	        		addLink(components.get(i).name);
+ 	        		return;
+ 	        	} else {
+ 	        		System.out.println("uh oh!");
+@@ -154,6 +155,21 @@ public class DragAndDropController extends MouseInputAdapter{
+ 			}
+ 		}
+ 	}
++	
++	public void addLink(String classOneName){
++		for (int i=0;i<components.size();i++){
++			if (components.get(i).name == classOneName){
++				String classTwoName = 
++					JOptionPane.showInputDialog("Enter Class Two Name:");
++				String oneToManyQuantifier = 
++					JOptionPane.showInputDialog("Enter a quantifier:");
++				components.get(i).links.add(new Link(classTwoName, 
++						oneToManyQuantifier));
++				diagramPanel.repaint();
++				return;
++			}
++		}
++	}
+  
+ 	/*
+ 	 * (non-Javadoc)
+@@ -192,4 +208,30 @@ public class DragAndDropController extends MouseInputAdapter{
+ 			currentClass.paintComponent(g);
+ 		}
+ 	}
++	
++	/*
++	 * Some funky jazz to draw the links, 
++	 * TODO: draw the arrow head.
++	 * TODO: draw the quantifier.
++     * TODO: change from one line into two squared parts.
++	 */
++	public void drawLinks(Graphics g){
++		Vector<Link> currentLinks;
++		String obj;
++
++		for(int i=0; i < components.size(); i++) {
++			currentLinks = (Vector<Link>)(components.get(i).links);
++			for(int j=0; j < currentLinks.size(); j++) {
++				Link currentLink = currentLinks.get(j);
++
++				for(int m=0; m < components.size(); m++) {
++					obj = components.get(m).name;
++					if (obj.equals(currentLink.classTwoName)){
++						currentLink.paintComponent(g, components.get(i), components.get(m));
++						break;
++					}
++				}
++			}
++		}
++	}
+ }
+\ No newline at end of file
